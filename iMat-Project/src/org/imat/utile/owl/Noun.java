package org.imat.utile.owl;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Noun <br>
 * @version generated on Mon Apr 27 04:17:47 EEST 2015 by lenovo
 */

public interface Noun extends WrappedIndividual {

    /* ***************************************************
     * Property http://www.semanticweb.org/rami#hasSynonym
     */
     
    /**
     * Gets all property values for the hasSynonym property.<p>
     * 
     * @returns a collection of values for the hasSynonym property.
     */
    Collection<? extends Noun> getHasSynonym();

    /**
     * Checks if the class has a hasSynonym property value.<p>
     * 
     * @return true if there is a hasSynonym property value.
     */
    boolean hasHasSynonym();

    /**
     * Adds a hasSynonym property value.<p>
     * 
     * @param newHasSynonym the hasSynonym property value to be added
     */
    void addHasSynonym(Noun newHasSynonym);

    /**
     * Removes a hasSynonym property value.<p>
     * 
     * @param oldHasSynonym the hasSynonym property value to be removed.
     */
    void removeHasSynonym(Noun oldHasSynonym);


    /* ***************************************************
     * Property http://www.semanticweb.org/rami#isRelatedTo
     */
     
    /**
     * Gets all property values for the isRelatedTo property.<p>
     * 
     * @returns a collection of values for the isRelatedTo property.
     */
    Collection<? extends Noun> getIsRelatedTo();

    /**
     * Checks if the class has a isRelatedTo property value.<p>
     * 
     * @return true if there is a isRelatedTo property value.
     */
    boolean hasIsRelatedTo();

    /**
     * Adds a isRelatedTo property value.<p>
     * 
     * @param newIsRelatedTo the isRelatedTo property value to be added
     */
    void addIsRelatedTo(Noun newIsRelatedTo);

    /**
     * Removes a isRelatedTo property value.<p>
     * 
     * @param oldIsRelatedTo the isRelatedTo property value to be removed.
     */
    void removeIsRelatedTo(Noun oldIsRelatedTo);


    /* ***************************************************
     * Property http://www.semanticweb.org/rami#isTypeOf
     */
     
    /**
     * Gets all property values for the isTypeOf property.<p>
     * 
     * @returns a collection of values for the isTypeOf property.
     */
    Collection<? extends Noun> getIsTypeOf();

    /**
     * Checks if the class has a isTypeOf property value.<p>
     * 
     * @return true if there is a isTypeOf property value.
     */
    boolean hasIsTypeOf();

    /**
     * Adds a isTypeOf property value.<p>
     * 
     * @param newIsTypeOf the isTypeOf property value to be added
     */
    void addIsTypeOf(Noun newIsTypeOf);

    /**
     * Removes a isTypeOf property value.<p>
     * 
     * @param oldIsTypeOf the isTypeOf property value to be removed.
     */
    void removeIsTypeOf(Noun oldIsTypeOf);


    /* ***************************************************
     * Property http://www.semanticweb.org/rami#Label
     */
     
    /**
     * Gets all property values for the Label property.<p>
     * 
     * @returns a collection of values for the Label property.
     */
    Collection<? extends Object> getLabel();

    /**
     * Checks if the class has a Label property value.<p>
     * 
     * @return true if there is a Label property value.
     */
    boolean hasLabel();

    /**
     * Adds a Label property value.<p>
     * 
     * @param newLabel the Label property value to be added
     */
    void addLabel(Object newLabel);

    /**
     * Removes a Label property value.<p>
     * 
     * @param oldLabel the Label property value to be removed.
     */
    void removeLabel(Object oldLabel);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
