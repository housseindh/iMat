package org.imat.utile.owl.impl;

import org.imat.utile.owl.*;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultOutputParam <br>
 * @version generated on Mon Apr 27 04:17:47 EEST 2015 by lenovo
 */
public class DefaultOutputParam extends WrappedIndividualImpl implements OutputParam {

    public DefaultOutputParam(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/rami#isEquivalent
     */
     
    public Collection<? extends Noun> getIsEquivalent() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISEQUIVALENT,
                                               DefaultNoun.class);
    }

    public boolean hasIsEquivalent() {
	   return !getIsEquivalent().isEmpty();
    }

    public void addIsEquivalent(Noun newIsEquivalent) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISEQUIVALENT,
                                       newIsEquivalent);
    }

    public void removeIsEquivalent(Noun oldIsEquivalent) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISEQUIVALENT,
                                          oldIsEquivalent);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/rami#isOutputTo
     */
     
    public Collection<? extends MethodCall> getIsOutputTo() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_ISOUTPUTTO,
                                               DefaultMethodCall.class);
    }

    public boolean hasIsOutputTo() {
	   return !getIsOutputTo().isEmpty();
    }

    public void addIsOutputTo(MethodCall newIsOutputTo) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_ISOUTPUTTO,
                                       newIsOutputTo);
    }

    public void removeIsOutputTo(MethodCall oldIsOutputTo) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_ISOUTPUTTO,
                                          oldIsOutputTo);
    }


    /* ***************************************************
     * Data Property http://www.semanticweb.org/rami#Label
     */
     
    public Collection<? extends Object> getLabel() {
		return getDelegate().getPropertyValues(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LABEL, Object.class);
    }

    public boolean hasLabel() {
		return !getLabel().isEmpty();
    }

    public void addLabel(Object newLabel) {
	    getDelegate().addPropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LABEL, newLabel);
    }

    public void removeLabel(Object oldLabel) {
		getDelegate().removePropertyValue(getOwlIndividual(), Vocabulary.DATA_PROPERTY_LABEL, oldLabel);
    }


}
